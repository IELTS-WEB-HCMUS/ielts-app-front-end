<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Bootstrap CSS (for styling the filter and navbar) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome for the filter icon -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <style>
        .filter-section {
            padding: 20px;
            border-right: 1px solid #ddd;
            width: 250px;
            background-color: #f8f9fa;
        }

        .filter-section p {
            font-weight: bold;
        }

        .filter-section ul {
            list-style-type: none;
            padding-left: 0;
        }

        .filter-section ul li {
            margin-bottom: 5px;
        }

        .card {
            margin: 10px 0;
        }

        .navbar {
            margin-bottom: 20px;
        }

        .custom {
            margin: 5px;
        }

        .btn-custom {
            margin: 5px;
            background-color: darkgreen;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-weight: bold;
        }

        .btn-custom:hover {
            background-color: lightgreen;
        }

        .form-control::placeholder {
            font-size: 1rem;
        }

        .active {
            background-color: #28a745;
            color: white;
        }

        #clear-filter {
            cursor: pointer;
        }
    </style>
</head>

<body>

    <div class="container-fluid d-flex" style="background-color: #EBF5FF; margin-top: 4%;">
        <div class="filter-section">
            <div class="filter-title" id="clear-filter">
                <i class="fas fa-filter"></i> Lọc
            </div>

            <div class="filter-category">
                <p>Passage (Độ khó)</p>
                <ul>
                    {{#each tagpassage}}
                    <li><button class="btn custom btn-outline-secondary filter-btn" data-filter="tagpassage"
                            data-value="{{{ id }}}"><i class="fa fa-book"></i> {{{ title }}}</button></li>
                    {{/each}}
                </ul>
            </div>

            <div class="filter-category">
                <p>Loại câu hỏi</p>
                <ul>
                    {{#each taglevel}}
                    <li><button class="btn custom btn-outline-secondary filter-btn text-truncate"
                            style="width: 200px; text-align: left;" data-filter="taglevel" data-value="{{{ id }}}"><i
                                class="fa fa-book"></i> {{{ title }}}</button></li>
                    {{/each}}
                </ul>
            </div>
        </div>

        <!-- Main content area -->
        <div class="main-content flex-grow-1">
            <!-- Navbar -->
            <div class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="container-fluid">
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                        data-bs-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false"
                        aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
                        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                            <li class="nav-item">
                                <button class="btn-custom filter-btn" data-filter="submitted_status" data-value="1">Đã
                                    làm</button>
                            </li>
                            <li class="nav-item">
                                <button class="btn-custom filter-btn" data-filter="submitted_status" data-value="2">Chưa
                                    làm</button>
                            </li>
                        </ul>
                        <form class="d-flex" role="search" id="search-form">
                            <input class="form-control me-2" type="search" placeholder="Tìm quiz" aria-label="Tìm quiz"
                                id="search-input">
                            <button class="btn btn-outline-success" name="search" type="submit">Tìm kiếm</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Card View (Dynamic content loaded via templating or data) -->
            <div id="card-container" style="display: flex; flex-wrap: wrap; margin-top: -7%; margin-left: 2%;">
                {{#each fullquiz}}
                {{> cardview this}}
                {{/each}}
            </div>

            <div id="pagination-container" style="margin-top: 5%;">
                <ul class="pagination justify-content-center">
                    {{#each pages}}
                    <li class="page-item">
                        <a class="page-link" href="javascript:void(0);" data-page="{{this}}">{{{ this }}}</a>
                    </li>
                    {{/each}}
                </ul>
            </div>

        </div>
    </div>

    <!-- Bootstrap JS (for functionality like the navbar toggle) -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>

</body>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        let filters = {
            tagpassage: null,
            taglevel: null,
            submitted_status: null,
            search: null
        };

        const getModeFromURL = () => {
            const urlParams = new URLSearchParams(window.location.search);
            return urlParams.get("mode");
        };

        const loadPaginationLinks = () => {
            const paginationLinks = document.querySelectorAll(".pagination .page-item .page-link");

            paginationLinks.forEach(link => {
                link.addEventListener("click", (event) => {
                    const page = event.target.getAttribute("data-page");
                    loadPageData(page);
                });
            });
        };

        const loadPageData = (page) => {
            const urlParams = new URLSearchParams();
            for (let key in filters) {
                if (filters[key]) {
                    urlParams.append(key, filters[key]);
                }
            }
            
            const mode = getModeFromURL();
            if (mode) {
                urlParams.append("mode", mode);
            }

            urlParams.append("page", page);

            fetch(`/user/fulltest?${urlParams.toString()}`)
                .then(response => response.text())
                .then(html => {
                    document.getElementById("card-container").innerHTML = getHTMLContentFromResponse(html, "card-container");
                    document.getElementById("pagination-container").innerHTML = getHTMLContentFromResponse(html, "pagination-container");

                    loadPaginationLinks();
                    updateActivePage(page);
                })
                .catch(error => {
                    console.error("Error loading page data:", error);
                });
        };

        const getHTMLContentFromResponse = (html, containerId) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, "text/html");
            return doc.getElementById(containerId).innerHTML;
        };

        const updateActivePage = (page) => {
            const paginationLinks = document.querySelectorAll(".pagination .page-item .page-link");
            paginationLinks.forEach(link => {
                if (link.getAttribute("data-page") === page) {
                    link.classList.add("active");
                } else {
                    link.classList.remove("active");
                }
            });
        };

        const initialPage = document.querySelector(".pagination .page-item .page-link").getAttribute("data-page");
        updateActivePage(initialPage);

        loadPaginationLinks();

        // Add filter button click event
        const filterButtons = document.querySelectorAll(".filter-btn");
        filterButtons.forEach(button => {
            button.addEventListener("click", () => {
                const filterType = button.getAttribute("data-filter");
                const filterValue = button.getAttribute("data-value");

                // Set the filter value
                filters[filterType] = filterValue;

                // Get all buttons for the same filter category
                const groupButtons = document.querySelectorAll(`[data-filter="${filterType}"]`);

                // Remove 'active' class from all buttons in the group
                groupButtons.forEach(btn => btn.classList.remove("active"));

                // Add 'active' class to the clicked button
                button.classList.add("active");

                loadPageData(initialPage); // Reload page data with updated filters
            });
        });

        // Handle search form submit
        const searchForm = document.getElementById("search-form");
        searchForm.addEventListener("submit", (event) => {
            event.preventDefault();
            filters.search = document.getElementById("search-input").value;
            loadPageData(initialPage); // Reload page data with search query
        });

        const clearFilterButton = document.getElementById("clear-filter");
        clearFilterButton.addEventListener("click", () => {
            filters = {
                tagpassage: null,
                taglevel: null,
                submitted_status: null,
                search: null
            };

            filterButtons.forEach(btn => btn.classList.remove("active"));
            searchForm.reset();

            loadPageData(initialPage); 
        });
    });
</script>